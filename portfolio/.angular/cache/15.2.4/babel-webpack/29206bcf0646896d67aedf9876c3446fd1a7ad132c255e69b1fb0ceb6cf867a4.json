{"ast":null,"code":"import { ref, uploadBytes } from '@angular/fire/storage';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/storage\";\nexport class ImageService {\n  constructor(storage) {\n    this.storage = storage;\n  }\n  uploadImage($event, name) {\n    const file = $event.target.files[0];\n    const imgRef = ref(this.storage, `imagen/` + name);\n    uploadBytes(imgRef, file).then(response => {\n      this.getImages();\n    }).catch(error => console.log(error));\n  }\n  getImages() {}\n}\nImageService.ɵfac = function ImageService_Factory(t) {\n  return new (t || ImageService)(i0.ɵɵinject(i1.Storage));\n};\nImageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ImageService,\n  factory: ImageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAkBA,GAAG,EAAEC,WAAW,QAAQ,uBAAuB;;;AAKjE,OAAM,MAAOC,YAAY;EAEvBC,YAAoBC,OAAe;IAAf,YAAO,GAAPA,OAAO;EAAY;EAEhCC,WAAW,CAACC,MAAU,EAAEC,IAAY;IACzC,MAAMC,IAAI,GAAEF,MAAM,CAACG,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClC,MAAMC,MAAM,GAAGX,GAAG,CAAC,IAAI,CAACI,OAAO,EAAE,SAAS,GAACG,IAAI,CAAC;IAChDN,WAAW,CAACU,MAAM,EAAEH,IAAI,CAAC,CACxBI,IAAI,CAACC,QAAQ,IAAG;MAAC,IAAI,CAACC,SAAS,EAAE;IAAA,CAAC,CAAC,CACnCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EACrC;EAEAF,SAAS,IAET;;AAdWZ,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAiB,SAAZjB,YAAY;EAAAkB,YAFX;AAAM","names":["ref","uploadBytes","ImageService","constructor","storage","uploadImage","$event","name","file","target","files","imgRef","then","response","getImages","catch","error","console","log","factory","providedIn"],"sourceRoot":"","sources":["D:\\Diseño Web y Programación\\YoProgramo2022-2023\\PortfolioFrontEnd\\portfolio\\src\\app\\service\\image.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Storage, ref, uploadBytes } from '@angular/fire/storage';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImageService {\n\n  constructor(private storage:Storage) { }\n\n  public uploadImage($event:any, name: string){\n    const file= $event.target.files[0]\n    const imgRef = ref(this.storage, `imagen/`+name)\n    uploadBytes(imgRef, file)\n    .then(response =>{this.getImages()})\n    .catch(error => console.log(error))\n  }\n\n  getImages(){\n\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}